// Theme handling logic and CSS variable assignments

// Import variables first to use them
@import "variables";

// Define CSS variables for the light theme
:root {
  color-scheme: light dark;
  
  // Light theme defaults (from $light-theme map)
  --background-color: #{map-get($light-theme, 'background-color')};
  --surface-color: #{map-get($light-theme, 'surface-color')};
  --text-color: #{map-get($light-theme, 'text-color')};
  --text-color-soft: #{map-get($light-theme, 'text-color-soft')};
  --heading-color: #{map-get($light-theme, 'heading-color')};
  --border-color: #{map-get($light-theme, 'border-color')};
  --selection-background: #{map-get($light-theme, 'selection-background')};
  --selection-text: #{map-get($light-theme, 'selection-text')};
  --code-background: #{map-get($light-theme, 'code-background')};
  --card-background: #{map-get($light-theme, 'card-background')};
  --card-shadow: #{map-get($light-theme, 'card-shadow')};
  --hover-background: #{map-get($light-theme, 'hover-background')};
  --scrollbar-thumb: #{map-get($light-theme, 'scrollbar-thumb')};
  --scrollbar-track: #{map-get($light-theme, 'scrollbar-track')};

  // Link colors for light theme
  --link-color: #{$primary-color};
  --link-hover-color: #{$primary-color-dark};
  --blockquote-color: #{map-get($light-theme, 'text-color-soft')};
  
  // Non-theme-specific variables
  --primary-color: #{$primary-color};
  --primary-color-dark: #{$primary-color-dark};
  --secondary-color: #{$secondary-color};
  --accent-color: #{$accent-color};
  --font-family-sans-serif: #{$font-stack-sans};
  --font-family-mono: #{$font-stack-mono};
  --font-family-serif: #{$font-stack-serif};
  --border-radius-sm: #{$border-radius-sm};
  --border-radius: #{$border-radius};
  --border-radius-lg: #{$border-radius-lg};
  --box-shadow: #{$box-shadow};
  --box-shadow-hover: #{$box-shadow-hover};
  --transition-standard: #{$transition-standard};
  --transition-fast: #{$transition-fast};
  --equation-background: #{$equation-background};
  --equation-border: #{$equation-border};
  --math-accent-color: #{$math-accent-color};
}

// Dark theme styles
:root[data-theme="dark"] {
  // Override light theme variables with dark theme values
  --background-color: #{map-get($dark-theme, 'background-color')} !important;
  --surface-color: #{map-get($dark-theme, 'surface-color')} !important;
  --text-color: #{map-get($dark-theme, 'text-color')} !important;
  --text-color-soft: #{map-get($dark-theme, 'text-color-soft')} !important;
  --heading-color: #{map-get($dark-theme, 'heading-color')} !important;
  --border-color: #{map-get($dark-theme, 'border-color')};
  --selection-background: #{map-get($dark-theme, 'selection-background')};
  --selection-text: #{map-get($dark-theme, 'selection-text')};
  --code-background: #{map-get($dark-theme, 'code-background')};
  --card-background: #{map-get($dark-theme, 'card-background')};
  --card-shadow: #{map-get($dark-theme, 'card-shadow')};
  --hover-background: #{map-get($dark-theme, 'hover-background')};
  --scrollbar-thumb: #{map-get($dark-theme, 'scrollbar-thumb')};
  --scrollbar-track: #{map-get($dark-theme, 'scrollbar-track')};
  
  // Link colors for dark theme
  --link-color: #{lighten($primary-color, 10%)};
  --link-hover-color: #{lighten($primary-color, 20%)};
  --blockquote-color: #{map-get($dark-theme, 'text-color-soft')};
}

// Apply theme variables to elements
html {
  // Apply smooth transition for theme switch
  transition: background-color 0.3s ease, color 0.3s ease;
}

// Theme transition class is applied to HTML element immediately
html.theme-applied {
  background-color: var(--background-color);
}

body {
  background-color: var(--background-color);
  color: var(--text-color);
  min-height: 100vh; // Ensure full viewport coverage
  transition: background-color 0.3s ease, color 0.3s ease;
}

// Style elements using CSS variables
a {
  color: var(--link-color);
  &:hover {
    color: var(--link-hover-color);
  }
}

h1, h2, h3, h4, h5, h6 {
  color: var(--heading-color);
}

blockquote {
  color: var(--blockquote-color);
  border-left-color: var(--border-color);
}

code {
  background-color: var(--code-background);
}

// Add theme transition class - applied to HTML and body elements
.theme-transition {
  transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease !important;
}

// Theme toggle button styles
.theme-toggle {
  background: transparent;
  border: none;
  color: var(--text-color);
  cursor: pointer;
  font-size: 1.1rem;
  padding: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  margin-left: 1rem;
  transition: background-color 0.2s ease;
  
  &:hover {
    background-color: var(--hover-background);
  }
  
  .fa-sun {
    display: none;
  }
  
  .fa-moon {
    display: inline-block;
  }
}

// Show/hide appropriate icon based on theme
[data-theme="dark"] .theme-toggle {
  .fa-sun {
    display: inline-block;
  }
  
  .fa-moon {
    display: none;
  }
}

// Custom scrollbar
::-webkit-scrollbar {
  width: 12px;
  height: 12px;
}

::-webkit-scrollbar-track {
  background: var(--scrollbar-track);
}

::-webkit-scrollbar-thumb {
  background: var(--scrollbar-thumb);
  border-radius: 6px;
  border: 3px solid var(--scrollbar-track);
}

::-webkit-scrollbar-thumb:hover {
  background: var(--text-color-soft);
}
